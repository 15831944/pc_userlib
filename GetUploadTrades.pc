#include <stdio.h>
#include <string.h>
#include "GetUploadTrades.h"
#include "floatrepo.h"
#include "userinfo.h"

EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE oraca;
EXEC ORACLE OPTION (ORACA=YES);


void getNewTickets(const char *date, const char *counterparty, const char *portlist, int bCP);
void getModifyTickets(const char *date, const char *counterparty, const char *portlist, int bCP);
void getDeleteTickets(const char *date, const char *counterparty, const char *portlist, int bCP);
void getTrades(const char *date, const char *counterparty, const char *portlist, int bCP);
void getTrades2(const char *date, const char *counterparty, const char *portlist, int bCP);
void clearSwapTicket();
void fillSwapTicket();
void fillNearSwapTicket();
void toHistory();


void setupTradeUploadFundSql(const char *portlist, int bIn, char *FundSql, int nSqlSize)
{
	FundSql[0] = 0;
	if(!portlist || strlen(portlist) == 0 || strstr(portlist, "ALL") == 0)
		FundSql[0] = 0;
	else
		if(bIn)
			sprintf_s(FundSql, nSqlSize, "AND A.PORTFOLIO IN (%s) ", portlist);
		else
			sprintf_s(FundSql, nSqlSize, "AND A.PORTFOLIO NOT IN (%s) ", portlist);	
}

void getUploadMultiFundTrades(const char* date, const char *assign_cp, const char *portlist, int bIn)
{
	char FundSql[200];

	// date and assign_cp or fund accountant must be valid 
	if((!date || strlen(date) == 0) || (!assign_cp || strlen(assign_cp) == 0))
		return;
	
	setupTradeUploadFundSql(portlist, bIn, FundSql, sizeof(FundSql));

	toHistory();

//	getNewTickets(date, assign_cp, FundSql, 1);
//	getModifyTickets(date, assign_cp, FundSql, 1);
//	getDeleteTickets(date, assign_cp, FundSql, 1);
//	getTrades(date, assign_cp, FundSql, 1);
	getTrades2(date, assign_cp, FundSql, 1);
	clearSwapTicket();

	return;
}

void getAdminUploadTrades(const char* date, const char *assign_cp, const char *portlist, int bIn)
{
	char FundSql[200];

	// date and assign_cp or fund accountant must be valid 
	if((!date || strlen(date) == 0) || (!assign_cp || strlen(assign_cp) == 0))
		return;

	setupTradeUploadFundSql(portlist, bIn, FundSql, sizeof(FundSql));

	toHistory();

//	getNewTickets(date, assign_cp, FundSql, 0);
//	getModifyTickets(date, assign_cp, FundSql, 0);
//	getDeleteTickets(date, assign_cp, FundSql, 0);
//	getTrades(date, assign_cp, FundSql, 0);
	getTrades2(date, assign_cp, FundSql, 0);
	clearSwapTicket();

	return;
}

void getUploadTrades(const char* date, const char *assign_cp)
{
	// date and assign_cp or fund accountant must be valid 
	if((!date || strlen(date) == 0) || (!assign_cp || strlen(assign_cp) == 0))
		return;

	toHistory();

//	getNewTickets(date, assign_cp, "", 1);
//	getModifyTickets(date, assign_cp, "", 1);
//	getDeleteTickets(date, assign_cp, "", 1);
//	getTrades(date, assign_cp, "", 1);
	getTrades2(date, assign_cp, "", 1);
	clearSwapTicket();

	return;
}

void getNewTickets(const char *date, const char *assign_cp, const char *FundSql, int bCP)
{
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR GUT_sqlstat[10000],
			GUT_assign_cp[21],
			GUT_date[10],
			GUT_ticket_num[11];
		
		long int GUT_trans_num, GUT_tmp_id;
		short GUT_ind;
	EXEC SQL END DECLARE SECTION;
	

	printf("\nFinding New Tickets");

	SaveCopy(GUT_date.arr, sizeof(GUT_date.arr), date, 0);
	SaveCopy(GUT_assign_cp.arr, sizeof(GUT_assign_cp.arr), assign_cp, 0);
	GUT_date.len = strlen(GUT_date.arr);
	GUT_assign_cp.len = strlen(GUT_assign_cp.arr);
	
	SaveCopy(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), 
			"SELECT DISTINCT A.TRANS_NUM, A.TICKET_NUM, NVL(B.TRANS_NUM, NVL(C.TRANS_NUM, 0)) ", 0);
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, SEMAM.NW_UPLOAD_PLAN B, "
			"SEMAM.NW_UPLOAD_HIST C ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.TRANS_NUM(+) = A.TRANS_NUM "
			"AND C.TRANS_NUM(+) = A.TRANS_NUM "
			"AND A.TRADE_DATE = :d1 ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d2 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d2 ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);
	GUT_sqlstat.len = strlen(GUT_sqlstat.arr);

	EXEC SQL WHENEVER SQLERROR GOTO Liblabel;

	EXEC SQL PREPARE GUP_S1 FROM :GUT_sqlstat;
	EXEC SQL DECLARE GUP_C1 CURSOR FOR GUP_S1;
	EXEC SQL OPEN GUP_C1 USING :GUT_date, :GUT_assign_cp;

	for(;;)
	{
		GUT_trans_num = 0;

		EXEC SQL FETCH GUP_C1 INTO :GUT_trans_num:GUT_ind, :GUT_ticket_num:GUT_ind, :GUT_tmp_id:GUT_ind;

		if(sqlca.sqlcode == 1403)
			break;

		GUT_ticket_num.arr[GUT_ticket_num.len] = 0;
		
		if(GUT_tmp_id == 0)
			EXEC SQL INSERT INTO SEMAM.NW_UPLOAD_PLAN (TRANS_NUM, TICKET_NUM, UPLOAD_TYPE, 
							UPLOADED, COUNTERPARTY, UPLOAD_METHOD, DATE_STAMP, LATEST )
							VALUES (:GUT_trans_num, :GUT_ticket_num, 'N', 'N', :GUT_assign_cp, 
							'', SYSDATE, 'Y' );
	}

	clearSwapTicket();

	EXEC SQL CLOSE GUP_C1;
	return;

Liblabel:
	SqlError("getNewTickets", 1);
	return;
}

void getModifyTickets(const char *date, const char *assign_cp, const char *FundSql, int bCP)
{
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR GUT_sqlstat[10000],
		GUT_assign_cp[21],
		GUT_date[10],
		GUT_ticket_num[11];

		long int GUT_trans_num;
		short GUT_ind;	
	EXEC SQL END DECLARE SECTION;

	printf("\nFinding Modify Tickets");

	SaveCopy(GUT_date.arr, sizeof(GUT_date.arr), date, 0);
	SaveCopy(GUT_assign_cp.arr, sizeof(GUT_assign_cp.arr), assign_cp, 0);
	GUT_date.len = strlen(GUT_date.arr);
	GUT_assign_cp.len = strlen(GUT_assign_cp.arr);

	// Ticket Change
	SaveCopy(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM ", 0);
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
		"SEMAM.V_TICKETS_HIST D, SEMAM.NW_UPLOAD_PLAN X ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE D.TRANS_NUM = A.TRANS_NUM "
		"AND ((X.TRANS_NUM = A.TRANS_NUM "
		"AND X.DATE_STAMP < A.DATE_STAMP "
		"AND X.DATE_STAMP < D.CH_DATE "
		"AND X.UPLOADED = 'Y' "
		"AND X.LATEST = 'Y') OR (A.TRANS_NUM != A.WRK_TRANS_NUM)) "
		"AND TRUNC(A.DATE_STAMP) = :d1 "
		"AND (D.PORTFOLIO != A.PORTFOLIO OR "
			"D.TRADE_DATE != A.TRADE_DATE OR "
			"D.TRANS_TYPE != A.TRANS_TYPE OR "
			"D.DIR != A.DIR OR "
			"D.CURRENCY != A.CURRENCY OR "
			"D.NOM_AMOUNT != A.NOM_AMOUNT OR "
			"D.COUNTERPARTY != A.COUNTERPARTY OR "
			"NVL(D.VALUE_DATE, TO_DATE('30-NOV-88')) != NVL(A.VALUE_DATE, TO_DATE('30-NOV-88')) OR "
			"NVL(D.MATURITY_DATE, TO_DATE('30-NOV-88')) != NVL(A.MATURITY_DATE, TO_DATE('30-NOV-88')) OR "
			"NVL(D.PRICE, 0) != NVL(A.PRICE, 0) OR "
			"NVL(D.TR_RATE, 0) != NVL(A.TR_RATE, 0) OR "
			"NVL(D.RATE_BASIS, 'X') != NVL(A.RATE_BASIS, 'X') OR "
			"NVL(D.FLOAT_RATE_FORMULA, 'X') != NVL(A.FLOAT_RATE_FORMULA, 'X') OR "
			"NVL(D.ASSET_CODE, 'X') != NVL(A.ASSET_CODE, 'X') OR "
			"NVL(D.FXRATE, 0) != NVL(A.FXRATE, 0) OR "
			"NVL(D.OPT_EXPIRATION, TO_DATE('30-NOV-88')) != NVL(A.OPT_EXPIRATION, TO_DATE('30-NOV-88')) OR "
			"NVL(D.REPO_PRICE, 0) != NVL(A.REPO_PRICE, 0) OR "
			"NVL(D.REPO_FXRATE, 0) != NVL(A.REPO_FXRATE, 0) OR "
			"NVL(D.OPT_SET_CODE, 'X') != NVL(A.OPT_SET_CODE, 'X') OR "
			"NVL(D.SWAP_TICKET, 'X') != NVL(A.SWAP_TICKET, 'X') OR "
			"NVL(D.FX_DATE, TO_DATE('30-NOV-88')) != NVL(A.FX_DATE, TO_DATE('30-NOV-88')) OR "
			"NVL(D.SEC_FEE, 'X') != NVL(A.SEC_FEE, 'X') OR "
			"NVL(D.OR_FEE, 'X') != NVL(A.OR_FEE, 'X') OR "
			"NVL(D.TRANS_SEQ, 0) != NVL(A.TRANS_SEQ, 0)) ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
			"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d2 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d2 ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 

	// TicketInv Change
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
			"SEMAM.V_TICKETS_INV_HIST D, SEMAM.NW_UPLOAD_PLAN X ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE D.INV_NUM = A.INV_NUM "
			"AND X.TRANS_NUM = A.TRANS_NUM "
			"AND X.DATE_STAMP < A.INV_DATE_STAMP "
			"AND X.TRANS_NUM = D.TRANS_NUM "
			"AND X.DATE_STAMP < D.INV_CH_DATE "
			"AND X.UPLOADED = 'Y' "
			"AND X.LATEST = 'Y' "
			"AND TRUNC(A.INV_DATE_STAMP) = :d3 "
			"AND (NVL(D.ACC_CODE, '9') != NVL(A.ACC_CODE, '9') OR "
				"NVL(D.ACTUAL_VDATE, TO_DATE('30-NOV-88')) != NVL(A.ACTUAL_VDATE, TO_DATE('30-NOV-88')) OR "
				"NVL(D.CURRENCY, '9') != NVL(A.CURRENCY, '9') OR "
				"NVL(D.CROSS_RATE, 0) != NVL(A.CROSS_RATE, 0)) ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
			"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d4 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d4 ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 

	// Asset Change
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
		"SEMAM.NW_ASSETS B, SEMAM.NW_ASSETS_HIST D, SEMAM.NW_UPLOAD_PLAN X ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.ASS_CODE = A.ASSET_CODE "
			"AND D.ASS_CODE = B.ASS_CODE "
			"AND X.TRANS_NUM = A.TRANS_NUM "
			"AND X.UPLOADED = 'Y' "
			"AND X.LATEST = 'Y' "
			"AND X.DATE_STAMP < B.DATE_STAMP "
			"AND X.DATE_STAMP < D.CH_DATE "
			"AND TRUNC(B.DATE_STAMP) = :d5 "
			"AND (D.ASS_CURRENCY != B.ASS_CURRENCY OR "
				  "D.ASS_ACCRUABLE != B.ASS_ACCRUABLE OR "
				  "D.ASS_PPAID_INT != B.ASS_PPAID_INT OR "
				  "NVL(D.ASS_CURRENCY2, 'X') != NVL(B.ASS_CURRENCY2, 'X') OR " 
				  "NVL(D.ASS_INT_TYPE, 'X') != NVL(B.ASS_INT_TYPE, 'X') OR "
				  "NVL(D.ASS_RATE_BASIS, 'X') != NVL(B.ASS_RATE_BASIS, 'X') OR "
				  "NVL(D.ASS_COUPON_START_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_COUPON_START_DATE, TO_DATE('30-NOV-88')) OR "
				  "NVL(D.ASS_BEGIN_ROLL_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_BEGIN_ROLL_DATE, TO_DATE('30-NOV-88')) OR "
				  "NVL(D.ASS_MATURITY_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_MATURITY_DATE, TO_DATE('30-NOV-88')) OR "
				  "NVL(D.ASS_FX_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_FX_DATE, TO_DATE('30-NOV-88'))) ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d6 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d6 ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 

	// Rate change
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
		"SEMAM.V_ASSET_RATES B, SEMAM.V_ASSET_RATES_HIST D, SEMAM.NW_UPLOAD_PLAN X ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.ASS_CODE = A.ASSET_CODE "
			"AND B.ASS_FROM <= A.VALUE_DATE "
			"AND B.ASS_TO > A.VALUE_DATE "
			"AND D.ASS_CODE = A.ASSET_CODE "
			"AND D.ASS_FROM <= A.VALUE_DATE "
			"AND D.ASS_TO > A.VALUE_DATE "
			"AND X.TRANS_NUM = A.TRANS_NUM "
			"AND X.UPLOADED = 'Y' "
			"AND X.LATEST = 'Y' "
			"AND X.DATE_STAMP < B.DATE_STAMP "
			"AND X.DATE_STAMP < D.CH_DATE "
			"AND TRUNC(B.DATE_STAMP) = :d7 "
			"AND (D.ASS_CODE != B.ASS_CODE OR "
				"D.ASS_FROM != B.ASS_FROM OR "
				"NVL(D.ASS_TO, TO_DATE('30-NOV-88')) != NVL(B.ASS_TO, TO_DATE('30-NOV-88')) OR "
				"NVL(D.RATE, 0) != NVL(B.RATE, 0) OR "
				"NVL(D.AMORT_FACT, 1) != NVL(B.AMORT_FACT, 1) OR "
				"NVL(D.CAPIT_RATE, 0) != NVL(B.CAPIT_RATE, 0) OR "
				"NVL(D.PLUS_AMOUNT, 0) != NVL(B.PLUS_AMOUNT, 0) OR "
				"NVL(D.ACTION, 'X') != NVL(B.ACTION, 'X')) ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d8 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d8 ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 

	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
		"SEMAM.V_TICKETS_HIST D, SEMAM.NW_UPLOAD_HIST X ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE D.TRANS_NUM = A.TRANS_NUM "
		"AND X.TRANS_NUM = A.TRANS_NUM "
		"AND X.DATE_STAMP < A.DATE_STAMP "
		"AND X.TRANS_NUM = D.TRANS_NUM "
		"AND X.DATE_STAMP < D.CH_DATE "
		"AND TRUNC(A.DATE_STAMP) = :d9 "
		"AND (D.PORTFOLIO != A.PORTFOLIO OR "
			 "D.TRADE_DATE != A.TRADE_DATE OR "
			 "D.TRANS_TYPE != A.TRANS_TYPE OR "
			 "D.DIR != A.DIR OR "
			 "D.CURRENCY != A.CURRENCY OR "
			 "D.NOM_AMOUNT != A.NOM_AMOUNT OR "
			 "D.COUNTERPARTY != A.COUNTERPARTY OR "
			 "NVL(D.VALUE_DATE, TO_DATE('30-NOV-88')) != NVL(A.VALUE_DATE, TO_DATE('30-NOV-88')) OR "
			 "NVL(D.MATURITY_DATE, TO_DATE('30-NOV-88')) != NVL(A.MATURITY_DATE, TO_DATE('30-NOV-88')) OR "
			 "NVL(D.PRICE, 0) != NVL(A.PRICE, 0) OR "
			 "NVL(D.TR_RATE, 0) != NVL(A.TR_RATE, 0) OR "
			 "NVL(D.RATE_BASIS, 'X') != NVL(A.RATE_BASIS, 'X') OR "
			 "NVL(D.FLOAT_RATE_FORMULA, 'X') != NVL(A.FLOAT_RATE_FORMULA, 'X') OR "
			 "NVL(D.ASSET_CODE, 'X') != NVL(A.ASSET_CODE, 'X') OR "
			 "NVL(D.FXRATE, 0) != NVL(A.FXRATE, 0) OR "
			 "NVL(D.OPT_EXPIRATION, TO_DATE('30-NOV-88')) != NVL(A.OPT_EXPIRATION, TO_DATE('30-NOV-88')) OR "
			 "NVL(D.REPO_PRICE, 0) != NVL(A.REPO_PRICE, 0) OR "
			 "NVL(D.REPO_FXRATE, 0) != NVL(A.REPO_FXRATE, 0) OR "
			 "NVL(D.OPT_SET_CODE, 'X') != NVL(A.OPT_SET_CODE, 'X') OR "
			 "NVL(D.SWAP_TICKET, 'X') != NVL(A.SWAP_TICKET, 'X') OR "
			 "NVL(D.FX_DATE, TO_DATE('30-NOV-88')) != NVL(A.FX_DATE, TO_DATE('30-NOV-88')) OR "
			 "NVL(D.SEC_FEE, 'X') != NVL(A.SEC_FEE, 'X') OR "
			 "NVL(D.OR_FEE, 'X') != NVL(A.OR_FEE, 'X') OR "
			 "NVL(D.TRANS_SEQ, 0) != NVL(A.TRANS_SEQ, 0)) ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
			"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d10 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d10 ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 

	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
		"SEMAM.V_TICKETS_INV_HIST D, SEMAM.NW_UPLOAD_HIST X ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE D.INV_NUM = A.INV_NUM "
		"AND X.TRANS_NUM = A.TRANS_NUM "
		"AND X.DATE_STAMP < A.INV_DATE_STAMP "
		"AND X.DATE_STAMP < D.INV_CH_DATE "
		"AND TRUNC(A.INV_DATE_STAMP) = :d11 "
		"AND (NVL(D.ACC_CODE, '9') != NVL(A.ACC_CODE, '9') OR "
			"NVL(D.ACTUAL_VDATE, TO_DATE('30-NOV-88')) != NVL(A.ACTUAL_VDATE, TO_DATE('30-NOV-88')) OR "
			"NVL(D.CURRENCY, '9') != NVL(A.CURRENCY, '9') OR "
			"NVL(D.CROSS_RATE, 0) != NVL(A.CROSS_RATE, 0)) ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
			"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d12 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d12 ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 

	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
		"SEMAM.NW_ASSETS B, SEMAM.NW_ASSETS_HIST D, SEMAM.NW_UPLOAD_HIST X ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.ASS_CODE = A.ASSET_CODE "
		"AND D.ASS_CODE = A.ASSET_CODE "
		"AND X.TRANS_NUM = A.TRANS_NUM "
		"AND X.DATE_STAMP < B.DATE_STAMP "
		"AND X.DATE_STAMP < D.CH_DATE "
		"AND TRUNC(B.DATE_STAMP) = :d13 "
		"AND (D.ASS_CURRENCY != B.ASS_CURRENCY OR "
			  "D.ASS_ACCRUABLE != B.ASS_ACCRUABLE OR "
			  "D.ASS_PPAID_INT != B.ASS_PPAID_INT OR "
			  "NVL(D.ASS_CURRENCY2, 'X') != NVL(B.ASS_CURRENCY2, 'X') OR " 
			  "NVL(D.ASS_INT_TYPE, 'X') != NVL(B.ASS_INT_TYPE, 'X') OR "
			  "NVL(D.ASS_RATE_BASIS, 'X') != NVL(B.ASS_RATE_BASIS, 'X') OR "
			  "NVL(D.ASS_COUPON_START_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_COUPON_START_DATE, TO_DATE('30-NOV-88')) OR "
			  "NVL(D.ASS_BEGIN_ROLL_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_BEGIN_ROLL_DATE, TO_DATE('30-NOV-88')) OR "
			  "NVL(D.ASS_MATURITY_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_MATURITY_DATE, TO_DATE('30-NOV-88')) OR "
			  "NVL(D.ASS_FX_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_FX_DATE, TO_DATE('30-NOV-88'))) ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d14 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d14 ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 

	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
		"SEMAM.V_ASSET_RATES B, SEMAM.V_ASSET_RATES_HIST D, SEMAM.NW_UPLOAD_HIST X ");
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.ASS_CODE = A.ASSET_CODE "
		"AND B.ASS_FROM <= A.VALUE_DATE "
		"AND B.ASS_TO > A.VALUE_DATE "
		"AND D.ASS_CODE = A.ASSET_CODE "
		"AND D.ASS_FROM <= A.VALUE_DATE "
		"AND D.ASS_TO > A.VALUE_DATE "
		"AND X.TRANS_NUM = A.TRANS_NUM "
		"AND X.DATE_STAMP < B.DATE_STAMP "
		"AND X.DATE_STAMP < D.CH_DATE "
		"AND TRUNC(B.DATE_STAMP) = :d15 "
		"AND (D.ASS_CODE = B.ASS_CODE OR "
			  "D.ASS_FROM != B.ASS_FROM OR "
			  "NVL(D.ASS_TO, TO_DATE('30-NOV-88')) != NVL(B.ASS_TO, TO_DATE('30-NOV-88')) OR "
			  "NVL(D.RATE, 0) != NVL(B.RATE, 0) OR "
			  "NVL(D.AMORT_FACT, 1) != NVL(B.AMORT_FACT, 1) OR "
			  "NVL(D.CAPIT_RATE, 0) != NVL(B.CAPIT_RATE, 0) OR "
			  "NVL(D.PLUS_AMOUNT, 0) != NVL(B.PLUS_AMOUNT, 0) OR "
			  "NVL(D.ACTION, 'X') != NVL(B.ACTION, 'X')) ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d16 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d16 ");

	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 

	GUT_sqlstat.len = strlen(GUT_sqlstat.arr);
	
	EXEC SQL PREPARE GUT_S2 FROM :GUT_sqlstat;
	EXEC SQL DECLARE GUT_C2 CURSOR FOR GUT_S2;
	EXEC SQL OPEN GUT_C2 using :GUT_date, :GUT_assign_cp, :GUT_date, :GUT_assign_cp, :GUT_date, :GUT_assign_cp, 
								:GUT_date, :GUT_assign_cp, :GUT_date, :GUT_assign_cp, :GUT_date, :GUT_assign_cp,
								:GUT_date, :GUT_assign_cp, :GUT_date, :GUT_assign_cp;

	for(;;)
	{

		GUT_trans_num = 0;

		EXEC SQL FETCH GUT_C2 INTO :GUT_trans_num:GUT_ind, :GUT_ticket_num:GUT_ind; 

		if(sqlca.sqlcode == 1403)
			break;

		GUT_ticket_num.arr[GUT_ticket_num.len] = 0;

		EXEC SQL UPDATE SEMAM.NW_UPLOAD_PLAN SET LATEST = 'N' WHERE TRANS_NUM = :GUT_trans_num;

		EXEC SQL INSERT INTO SEMAM.NW_UPLOAD_PLAN (TRANS_NUM, TICKET_NUM, UPLOAD_TYPE, 
						UPLOADED, COUNTERPARTY, UPLOAD_METHOD, DATE_STAMP, LATEST )
						VALUES (:GUT_trans_num, :GUT_ticket_num, 'M', 'N', :GUT_assign_cp, 
						'', SYSDATE, 'Y' );
	}
	EXEC SQL CLOSE GUT_C2;
	
	//find modify info in assets

	fillSwapTicket();
	clearSwapTicket();

	return;

Liblabel:
	SqlError("getModifyTickets", 1);
	return;

}

void getDeleteTickets(const char *date, const char *assign_cp, const char *FundSql, int bCP)
{
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR GUT_sqlstat[10000],
		GUT_assign_cp[21],
		GUT_date[10],
		GUT_ticket_num[11];
		
		long int GUT_trans_num, GUT_tmp_id;
		short GUT_ind;
	EXEC SQL END DECLARE SECTION;

	printf("\nFinding Deleted Tickets");
	
	SaveCopy(GUT_date.arr, sizeof(GUT_date.arr), date, 0);
	SaveCopy(GUT_assign_cp.arr, sizeof(GUT_assign_cp.arr), assign_cp, 0);
	GUT_date.len = strlen(GUT_date.arr);
	GUT_assign_cp.len = strlen(GUT_assign_cp.arr);
	
	SaveCopy(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM, NVL(C.TRANS_NUM, 0) "
			"FROM SEMAM.V_TICKETS_INV_HIST A, SEMAM.NW_DELETE_TICKETS B, SEMAM.NW_UPLOAD_PLAN C "
			"WHERE B.TRANS_NUM = A.TRANS_NUM "
			"AND B.VERSION = A.TR_VERSION "
			"AND C.TRANS_NUM(+) = B.TRANS_NUM "
			"AND C.UPLOADED(+) = 'Y' "
			"AND C.UPLOAD_TYPE(+) = 'D' "
			"AND TRUNC(A.DATE_STAMP) = :d1 ", 0);
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d2 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d2 ");

	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 
	
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION "
			"SELECT A.TRANS_NUM, A.TICKET_NUM, NVL(C.TRANS_NUM, 0) "
			"FROM SEMAM.V_TICKETS_INV_HIST A, SEMAM.NW_DELETE_TICKETS B, SEMAM.NW_UPLOAD_PLAN C, "
			"SEMAM.NW_UPLOAD_HIST D "
			"WHERE B.TRANS_NUM = A.TRANS_NUM "
			"AND B.VERSION = A.TR_VERSION "
			"AND C.TRANS_NUM(+) = B.TRANS_NUM "
			"AND C.UPLOAD_TYPE(+) = 'D' "
			"AND D.TRANS_NUM = B.TRANS_NUM "
			"AND TRUNC(A.DATE_STAMP) = :d3 ");
	if(bCP)
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d4 ");
	else
		SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d4 ");
	
	SaveConcatenate(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql); 
			
	GUT_sqlstat.len = strlen(GUT_sqlstat.arr);

	EXEC SQL PREPARE GUP_S4 FROM :GUT_sqlstat;
	EXEC SQL DECLARE GUP_C4 CURSOR FOR GUP_S4;
	EXEC SQL OPEN GUP_C4 USING :GUT_date, :GUT_assign_cp, :GUT_date, :GUT_assign_cp;

	for(;;)
	{
		GUT_trans_num = 0;

		EXEC SQL FETCH GUP_C4 INTO :GUT_trans_num:GUT_ind, :GUT_ticket_num:GUT_ind, :GUT_tmp_id:GUT_ind;

		if(sqlca.sqlcode == 1403)
			break;

		GUT_ticket_num.arr[GUT_ticket_num.len] = 0;
		
		if(GUT_tmp_id == 0)
		{
			EXEC SQL DELETE FROM SEMAM.NW_UPLOAD_PLAN WHERE TRANS_NUM = :GUT_trans_num 
								AND UPLOADED = 'N';

			EXEC SQL INSERT INTO SEMAM.NW_UPLOAD_PLAN (TRANS_NUM, TICKET_NUM, UPLOAD_TYPE, 
								UPLOADED, COUNTERPARTY, UPLOAD_METHOD, DATE_STAMP, LATEST )
								VALUES (:GUT_trans_num, :GUT_ticket_num, 'D', 'N', 
										:GUT_assign_cp, NULL, SYSDATE, 'N' );
		}
	}
	
	printf("\nFinding Deleted Tickets completed");
	clearSwapTicket();
	printf("\nClearSwapTicket completed");

	EXEC SQL CLOSE GUP_C4;
	return;

Liblabel:
	SqlError("getNewTickets", 1);
	return;
}

void fillSwapTicket()
{
//find far leg ticket for modified near leg ticket
	EXEC SQL INSERT INTO SEMAM.NW_UPLOAD_PLAN 
			( TRANS_NUM, TICKET_NUM, UPLOAD_TYPE, UPLOADED, COUNTERPARTY, UPLOAD_METHOD, DATE_STAMP, LATEST ) 
			SELECT A.TRANS_NUM, A.TICKET_NUM, 'M', 'N', B.COUNTERPARTY, B.UPLOAD_METHOD, SYSDATE, B.LATEST 
			FROM SEMAM.V_TICKETS A, SEMAM.NW_UPLOAD_PLAN B 
			WHERE A.SWAP_TICKET = B.TICKET_NUM 
			AND B.UPLOAD_TYPE = 'M';

	return;

Liblabel:
	SqlError("fillSwapTicket", 1);
	return;
}

void fillNearSwapTicket()
{
//find near leg ticket for modified near leg ticket
	EXEC SQL INSERT INTO SEMAM.NW_UPLOAD_PLAN 
			( TRANS_NUM, TICKET_NUM, UPLOAD_TYPE, UPLOADED, COUNTERPARTY, UPLOAD_METHOD, DATE_STAMP, LATEST ) 
			SELECT C.TRANS_NUM, C.TICKET_NUM, 'N', 'Y', B.COUNTERPARTY, B.UPLOAD_METHOD, B.DATE_STAMP, B.LATEST 
			FROM SEMAM.V_TICKETS A, SEMAM.V_TICKETS C, SEMAM.NW_UPLOAD_PLAN B 
			WHERE A.TRANS_NUM = B.TRANS_NUM 
			AND A.SWAP_TICKET IS NOT NULL 
			AND C.TICKET_NUM = A.SWAP_TICKET 
			AND C.PORTFOLIO = A.PORTFOLIO;
	return;

Liblabel:
	SqlError("fillNearSwapTicket", 1);
	return;
}

void clearSwapTicket()
{
/*	EXEC SQL DELETE FROM SEMAM.NW_UPLOAD_PLAN WHERE TICKET_NUM IN ( 
		SELECT SWAP_TICKET FROM SEMAM.V_TICKETS A, SEMAM.NW_UPLOAD_PLAN B 
		WHERE SWAP_TICKET IS NOT NULL 
		AND A.TRANS_NUM = B.TRANS_NUM ); */

	EXEC SQL DELETE FROM SEMAM.NW_UPLOAD_PLAN_Q WHERE TICKET_NUM IN ( 
		SELECT A.SWAP_TICKET FROM SEMAM.V_TICKETS A, SEMAM.NW_UPLOAD_PLAN_Q B, SEMAM.V_TICKETS C  
		WHERE B.TRANS_NUM = A.TRANS_NUM 
		AND C.TICKET_NUM = A.SWAP_TICKET  
		AND C.TRADE_DATE < TRUNC(B.INDATE) 
		AND A.SWAP_TICKET IS NOT NULL );
	return;

Liblabel:
	SqlError("clearSwapTicket", 1);
	return;
}


void toHistory()
{
	EXEC SQL BEGIN DECLARE SECTION;
		int GUT_count;
	EXEC SQL END DECLARE SECTION;

	fillNearSwapTicket();

	GUT_count = 0;
	EXEC SQL SELECT COUNT(*) INTO :GUT_count FROM SEMAM.NW_UPLOAD_PLAN_Q WHERE INDATE < TRUNC(SYSDATE);

	if(GUT_count <= 0)
		return;
	
	//remove duplicates, not sure where duplicates are from
	/*EXEC SQL DELETE FROM SEMAM.NW_UPLOAD_PLAN A
		WHERE A.LATEST = 'Y' AND A.ROWID > ANY (
			SELECT B.rowid FROM SEMAM.NW_UPLOAD_PLAN B
			WHERE A.TRANS_NUM = B.TRANS_NUM AND B.LATEST = 'Y'); */

	// Remove possible duplicates in hist
	EXEC SQL DELETE FROM SEMAM.NW_UPLOAD_HIST_Q WHERE TRANS_NUM IN 
			(SELECT TRANS_NUM 
			FROM SEMAM.NW_UPLOAD_PLAN_Q  
			WHERE INDATE < TRUNC(SYSDATE));

	// Remove possible duplicates in hist
	EXEC SQL INSERT INTO SEMAM.NW_UPLOAD_HIST_Q ( TRANS_NUM, TICKET_NUM, DATE_STAMP ) 
			SELECT DISTINCT TRANS_NUM, TICKET_NUM, DATE_STAMP 
			FROM SEMAM.NW_UPLOAD_PLAN_Q A 
			WHERE INDATE < TRUNC( SYSDATE ) 
			AND UPLOAD_TYPE != 'D'
			AND 0 = (SELECT COUNT(*) FROM SEMAM.NW_UPLOAD_HIST_Q B WHERE B.TRANS_NUM = A.TRANS_NUM);
	
/*	EXEC SQL DELETE FROM SEMAM.NW_UPLOAD_HIST WHERE TRANS_NUM IN
			(SELECT A.TRANS_NUM
			FROM SEMAM.NW_UPLOAD_PLAN A, SEMAM.NW_TR_TICKETS B
			WHERE TRUNC( A.DATE_STAMP ) = TRUNC( SYSDATE ) 
			AND A.UPLOAD_TYPE = 'M' 
			AND A.TRANS_NUM = B.TRANS_NUM
			AND B.TRADE_DATE < TRUNC( SYSDATE )
			AND LATEST = 'Y');

	EXEC SQL INSERT INTO SEMAM.NW_UPLOAD_HIST ( TRANS_NUM, TICKET_NUM, DATE_STAMP ) 
			SELECT A.TRANS_NUM, A.TICKET_NUM, A.DATE_STAMP 
			FROM SEMAM.NW_UPLOAD_PLAN A, SEMAM.NW_TR_TICKETS B
			WHERE TRUNC( A.DATE_STAMP ) = TRUNC( SYSDATE ) 
			AND A.UPLOAD_TYPE = 'M' 
			AND A.TRANS_NUM = B.TRANS_NUM
			AND B.TRADE_DATE < TRUNC( SYSDATE )
			AND LATEST = 'Y'; */

	EXEC SQL DELETE FROM SEMAM.NW_UPLOAD_PLAN_Q WHERE INDATE < TRUNC(SYSDATE);

	return;

Liblabel:
	SqlError("toHistory", 1);
	return;
}

/* void markUploaded(const char* ticket_num)
{

	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR GUT_ticket_num[11];
	EXEC SQL END DECLARE SECTION;

	SaveCopy(GUT_ticket_num.arr, sizeof(GUT_ticket_num.arr), ticket_num, 0);
	GUT_ticket_num.len = strlen(GUT_ticket_num.arr);
	EXEC SQL UPDATE SEMAM.NW_UPLOAD_PLAN SET UPLOADED = 'Y' WHERE TICKET_NUM = :GUT_ticket_num;

	return;

Liblabel:
	SqlError("markUploaded", 1);
	return;
}

void markUploadedbyTransNum(int trans_num)
{

	EXEC SQL BEGIN DECLARE SECTION;
		int GUT_trans_num;
	EXEC SQL END DECLARE SECTION;

	GUT_trans_num = trans_num;
	EXEC SQL UPDATE SEMAM.NW_UPLOAD_PLAN SET UPLOADED = 'Y' WHERE TRANS_NUM = :GUT_trans_num;

	return;

Liblabel:
	SqlError("markUploadedbyTransNum", 1);
	return;
} */

void markUploaded(const char* ticket_num)
{

	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR GUT_ticket_num[11];
	EXEC SQL END DECLARE SECTION;

	SaveCopy(GUT_ticket_num.arr, sizeof(GUT_ticket_num.arr), ticket_num, 0);
	GUT_ticket_num.len = strlen(GUT_ticket_num.arr);
	EXEC SQL UPDATE SEMAM.NW_UPLOAD_PLAN_Q SET UPLOADED = 'Y' WHERE TICKET_NUM = :GUT_ticket_num;

	return;

Liblabel:
	SqlError("markUploaded", 1);
	return;
}

void markUploadedbyTransNum(int trans_num)
{

	EXEC SQL BEGIN DECLARE SECTION;
		int GUT_trans_num;
	EXEC SQL END DECLARE SECTION;

	GUT_trans_num = trans_num;
	EXEC SQL UPDATE SEMAM.NW_UPLOAD_PLAN_Q SET UPLOADED = 'Y' WHERE TRANS_NUM = :GUT_trans_num;

	return;

Liblabel:
	SqlError("markUploadedbyTransNum", 1);
	return;
}

void getTrades(const char *date, const char *assign_cp, const char *FundSql, int bCP)
{
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR GUT_sqlstat[10000],
		GUT_assign_cp[21],
		GUT_date[10],
		GUT_ticket_num[11],
		GUT_uploadType[2],
		GUT_uploaded[2];
		
		long int GUT_trans_num;
		int GUT_version;
		short GUT_ind;
	EXEC SQL END DECLARE SECTION;

	printf("\nGet Trades");
	
	SaveCopy(GUT_date.arr, sizeof(GUT_date.arr), date, 0);
	SaveCopy(GUT_assign_cp.arr, sizeof(GUT_assign_cp.arr), assign_cp, 0);
	GUT_date.len = strlen(GUT_date.arr);
	GUT_assign_cp.len = strlen(GUT_assign_cp.arr);
	
	strcpy_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT DISTINCT A.TRANS_NUM, "
			"A.TICKET_NUM, A.TR_VERSION, 'N', NVL(D.UPLOADED, 'N') ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
			"SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE D.TRANS_NUM(+) = A.TRANS_NUM "
			"AND NVL(D.VERSION(+), 0) <= A.TR_VERSION "
			"AND D.UPLOAD_TYPE(+) = 'N' "
			"AND A.TRADE_DATE = :d1 ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d2 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d2 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM, "
			"A.TR_VERSION, 'D', 'N' ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.ALL_TICKET_INV_HIST_V A, "
			"SEMAM.NW_DELETE_TICKETS B, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.TRANS_NUM = A.TRANS_NUM "
			"AND B.VERSION = A.TR_VERSION "
			"AND D.TRANS_NUM = A.TRANS_NUM "
			"AND D.UPLOAD_TYPE != 'D' "
			"AND D.UPLOADED = 'Y' "
			"AND TRUNC(A.DATE_STAMP) = :d3 ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d4 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d4 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM, "
			"A.TR_VERSION, 'D', 'N' ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_CC_TICKETS_INV A, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE D.TRANS_NUM = A.TRANS_NUM "
			"AND D.UPLOAD_TYPE != 'D' "
			"AND D.UPLOADED = 'Y' "
			"AND A.DELETED = 'Y' "
			"AND A.WRK_TRADE_DATE = :d5 ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d6 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND B.ACCOUNTANT = :d6 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT DISTINCT A.TRANS_NUM, A.TICKET_NUM, "
		"A.TR_VERSION, 'M', 'N' ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
		"SEMAM.V_TICKETS_INV_HIST B, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.TRANS_NUM = A.TRANS_NUM "
		"AND TRUNC(B.CH_DATE) = :d7 "		
		"AND (B.PORTFOLIO != A.PORTFOLIO OR "
		"B.TRADE_DATE != A.TRADE_DATE OR "
		"B.TRANS_TYPE != A.TRANS_TYPE OR "
		"B.DIR != A.DIR OR "
		"B.CURRENCY != A.CURRENCY OR "
		"B.NOM_AMOUNT != A.NOM_AMOUNT OR "
		"B.COUNTERPARTY != A.COUNTERPARTY OR "
		"NVL(B.VALUE_DATE, TO_DATE('30-NOV-88')) != NVL(A.VALUE_DATE, TO_DATE('30-NOV-88')) OR "
		"NVL(B.MATURITY_DATE, TO_DATE('30-NOV-88')) != NVL(A.MATURITY_DATE, TO_DATE('30-NOV-88')) OR "
		"NVL(B.PRICE, 0) != NVL(A.PRICE, 0) OR "
		"NVL(B.TR_RATE, 0) != NVL(A.TR_RATE, 0) OR "
		"NVL(B.RATE_BASIS, 'X') != NVL(A.RATE_BASIS, 'X') OR "
		"NVL(B.FLOAT_RATE_FORMULA, 'X') != NVL(A.FLOAT_RATE_FORMULA, 'X') OR "
		"NVL(B.ASSET_CODE, 'X') != NVL(A.ASSET_CODE, 'X') OR "
		"NVL(B.FXRATE, 0) != NVL(A.FXRATE, 0) OR "
		"NVL(B.OPT_EXPIRATION, TO_DATE('30-NOV-88')) != NVL(A.OPT_EXPIRATION, TO_DATE('30-NOV-88')) OR "
		"NVL(B.REPO_PRICE, 0) != NVL(A.REPO_PRICE, 0) OR "
		"NVL(B.REPO_FXRATE, 0) != NVL(A.REPO_FXRATE, 0) OR "
		"NVL(B.OPT_SET_CODE, 'X') != NVL(A.OPT_SET_CODE, 'X') OR "
		"NVL(B.SWAP_TICKET, 'X') != NVL(A.SWAP_TICKET, 'X') OR "
		"NVL(B.FX_DATE, TO_DATE('30-NOV-88')) != NVL(A.FX_DATE, TO_DATE('30-NOV-88')) OR "
		"NVL(B.SEC_FEE, 'X') != NVL(A.SEC_FEE, 'X') OR "
		"NVL(B.OR_FEE, 'X') != NVL(A.OR_FEE, 'X') OR "
		"NVL(B.TRANS_SEQ, 0) != NVL(A.TRANS_SEQ, 0)) "
		"AND (A.TRADE_DATE <= :d8 AND TRUNC(A.DATE_STAMP) = :d9) "
		"AND D.TRANS_NUM = A.TRANS_NUM "
		"AND D.VERSION < A.TR_VERSION "
		"AND D.UPLOAD_TYPE != 'D' "
		"AND D.UPLOADED = 'Y' ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d10 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d10 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT DISTINCT A.TRANS_NUM, A.TICKET_NUM, "
		"A.TR_VERSION, 'M' , 'N' ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, "
		"SEMAM.V_TICKETS_INV_HIST B, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.TRANS_NUM = A.TRANS_NUM "
		"AND TRUNC(B.INV_CH_DATE) = :d11 "
		"AND B.INV_NUM = A.INV_NUM "
		"AND (B.TR_DESC != A.TR_DESC OR "
			"NVL(B.INV_CURRENCY, A.CURRENCY) != NVL(A.INV_CURRENCY, A.CURRENCY) OR "
     		"NVL(B.ACC_CODE, '9') != NVL(A.ACC_CODE, '9') OR "
			"NVL(B.ACTUAL_VDATE, TO_DATE('30-NOV-88')) != NVL(A.ACTUAL_VDATE, TO_DATE('30-NOV-88')) OR "
			"NVL(B.CROSS_RATE, 0) != NVL(A.CROSS_RATE, 0)) "
		"AND D.TRANS_NUM = A.TRANS_NUM "
		"AND D.VERSION <= A.TR_VERSION "
		"AND D.UPLOAD_TYPE != 'D' "
		"AND D.UPLOADED = 'Y' "
		"AND (A.TRADE_DATE <= :d12 AND TRUNC(A.INV_DATE_STAMP) = :d13) ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d14 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d14 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM, "
			"A.TR_VERSION, 'M', 'N' ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, SEMAM.NW_ASSETS B, "
			"SEMAM.NW_ASSETS_HIST C, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.ASS_CODE = A.ASSET_CODE "
			"AND C.ASS_CODE = A.ASSET_CODE "
			"AND C.ASS_CODE = B.ASS_CODE "
			"AND TRUNC(C.CH_DATE) = TRUNC(B.DATE_STAMP) " 
			"AND TRUNC(B.DATE_STAMP) = :d15 "
			"AND (C.ASS_CURRENCY != B.ASS_CURRENCY OR "
			"C.ASS_ACCRUABLE != B.ASS_ACCRUABLE OR "
			"C.ASS_PPAID_INT != B.ASS_PPAID_INT OR "
				"NVL(C.ASS_CURRENCY2, 'X') != NVL(B.ASS_CURRENCY2, 'X') OR "
				"NVL(C.ASS_INT_TYPE, 'X') != NVL(B.ASS_INT_TYPE, 'X') OR "
				"NVL(C.ASS_RATE_BASIS, 'X') != NVL(B.ASS_RATE_BASIS, 'X') OR "
				"NVL(C.ASS_COUPON_START_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_COUPON_START_DATE, TO_DATE('30-NOV-88')) OR "
				"NVL(C.ASS_BEGIN_ROLL_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_BEGIN_ROLL_DATE, TO_DATE('30-NOV-88')) OR "
				"NVL(C.ASS_MATURITY_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_MATURITY_DATE, TO_DATE('30-NOV-88')) OR "
				"NVL(C.ASS_FX_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_FX_DATE, TO_DATE('30-NOV-88'))) "
			"AND D.TRANS_NUM = A.TRANS_NUM "
			"AND D.VERSION <= A.TR_VERSION "
			"AND D.UPLOAD_TYPE != 'D' "
			"AND D.UPLOADED = 'Y' "
			"AND A.TRADE_DATE <= :d16 ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d17 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d17 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM, A.TR_VERSION, "
			"'M', 'N' ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.V_TICKETS_INV A, SEMAM.V_ASSET_RATES B, "
			"SEMAM.V_ASSET_RATES_HIST C, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.ASS_CODE = A.ASSET_CODE "
			"AND B.ASS_FROM <= A.VALUE_DATE "
			"AND B.ASS_TO > A.VALUE_DATE "
			"AND C.ASS_CODE = B.ASS_CODE "
			"AND TRUNC(C.CH_DATE) = TRUNC(B.DATE_STAMP) "
			"AND C.ASS_CODE = A.ASSET_CODE "
			"AND C.ASS_FROM <= A.VALUE_DATE "
			"AND C.ASS_TO > A.VALUE_DATE "
			"AND TRUNC(C.CH_DATE) = :d18 "
			"AND (C.ASS_FROM != B.ASS_FROM OR "
				"NVL(C.ASS_TO, TO_DATE('30-NOV-88')) != NVL(B.ASS_TO, TO_DATE('30-NOV-88')) OR "
				"NVL(C.ADJ_ASS_TO, TO_DATE('30-NOV-88')) != NVL(B.ADJ_ASS_TO, TO_DATE('30-NOV-88')) OR "
				"NVL(C.RATE, 0) != NVL(B.RATE, 0) OR "
				"NVL(C.AMORT_FACT, 1) != NVL(B.AMORT_FACT, 1) OR "
				"NVL(C.CAPIT_RATE, 0) != NVL(B.CAPIT_RATE, 0) OR "
				"NVL(C.PLUS_AMOUNT, 0) != NVL(B.PLUS_AMOUNT, 0) OR "
				"NVL(C.ACTION, 'X') != NVL(B.ACTION, 'X') OR "
				"NVL(C.START_DATE, TO_DATE('30-NOV-88')) != NVL(B.START_DATE, TO_DATE('30-NOV-88')) OR "
				"NVL(C.END_DATE, TO_DATE('30-NOV-88')) != NVL(B.END_DATE, TO_DATE('30-NOV-88'))) "
			"AND D.TRANS_NUM = A.TRANS_NUM "
			"AND D.VERSION <= A.TR_VERSION "
			"AND D.UPLOAD_TYPE != 'D' "
			"AND D.UPLOADED = 'Y' "
			"AND A.TRADE_DATE <= :d19 ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d20 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d20 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "ORDER BY 1, 3, 4 ");

	GUT_sqlstat.len = strlen(GUT_sqlstat.arr);

	EXEC SQL PREPARE GUP_S5 FROM :GUT_sqlstat;
	EXEC SQL DECLARE GUP_C5 CURSOR FOR GUP_S5;
	EXEC SQL OPEN GUP_C5 USING 	:GUT_date, :GUT_assign_cp, :GUT_date, :GUT_assign_cp, :GUT_date, 
								:GUT_assign_cp, :GUT_date, :GUT_date, :GUT_date, :GUT_assign_cp, 
								:GUT_date, :GUT_date, :GUT_date, :GUT_assign_cp, :GUT_date, 
								:GUT_date, :GUT_assign_cp, :GUT_date, :GUT_date, :GUT_assign_cp;

	for(;;)
	{
		GUT_trans_num = 0;
		GUT_version = 0;
		EXEC SQL FETCH GUP_C5 INTO :GUT_trans_num:GUT_ind, :GUT_ticket_num:GUT_ind, :GUT_version:GUT_ind,
									:GUT_uploadType:GUT_ind, :GUT_uploaded:GUT_ind;

		if(sqlca.sqlcode == 1403)
			break;

		GUT_ticket_num.arr[GUT_ticket_num.len] = 0;		
		GUT_uploadType.arr[GUT_uploadType.len] = 0;
		GUT_uploaded.arr[GUT_uploaded.len] = 0;
		printf("QUEREY: trans_num: %d Type:%s Uploaded: %s\n", GUT_trans_num, GUT_uploadType.arr, GUT_uploaded.arr);
		if(GUT_uploaded.arr[0] == 'N')
		{
			GUT_ind = 0;
			switch(GUT_uploadType.arr[0])
			{
				case 'D':
					EXEC SQL SELECT COUNT(*) INTO :GUT_ind FROM SEMAM.NW_UPLOAD_PLAN_Q
								WHERE TRANS_NUM = :GUT_trans_num  
								AND UPLOAD_TYPE IN ('N', 'M')
								AND UPLOADED = 'Y';
					break;
				case 'M': 		
					EXEC SQL SELECT COUNT(*) INTO :GUT_ind FROM SEMAM.NW_UPLOAD_PLAN_Q
								WHERE TRANS_NUM = :GUT_trans_num  
								AND UPLOAD_TYPE IN ('N')
								AND UPLOADED = 'Y';
					break;
				default:
					break;
			}
			
			EXEC SQL DELETE FROM SEMAM.NW_UPLOAD_PLAN_Q WHERE TRANS_NUM = :GUT_trans_num AND UPLOADED = 'N';
			if(GUT_ind > 0)
				EXEC SQL UPDATE SEMAM.NW_UPLOAD_PLAN_Q 
							SET UPLOAD_TYPE = :GUT_uploadType,
							UPLOADED = :GUT_uploaded, 
							VERSION = :GUT_version,
							COUNTERPARTY = :GUT_assign_cp 
							WHERE TRANS_NUM = :GUT_trans_num;
			else			
				EXEC SQL INSERT INTO SEMAM.NW_UPLOAD_PLAN_Q (INDATE, TRANS_NUM, TICKET_NUM, 
									UPLOAD_TYPE, UPLOADED, COUNTERPARTY, VERSION)
									VALUES (:GUT_date, :GUT_trans_num, :GUT_ticket_num, 
									:GUT_uploadType, :GUT_uploaded, :GUT_assign_cp, :GUT_version);
		}
	}
	
	printf("\nGet Trades completed");

	EXEC SQL CLOSE GUP_C5;
	return;

Liblabel:
	SqlError("getTrades", 1);
	return;

}

void getTodaysTrades(const char *date, int secs)
{
	EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR GUT_date[10];
	int exist_secs = 0;
	short my_ind;
	EXEC SQL END DECLARE SECTION;

	printf("\nGetTodaysTrades");
	
	SaveCopy(GUT_date.arr, sizeof(GUT_date.arr), date, 0);
	GUT_date.len = strlen(GUT_date.arr);
	
	if(secs > 0) // if today_tickets build within given time limit, use it without recreate it
	{
		EXEC SQL SELECT (SYSDATE - MAX(CREATE_DATE))*24*3600 into :exist_secs:my_ind FROM SEMAM.NW_TODAY_TICKETS 
					WHERE INDATE = :GUT_date;
		if (exist_secs > 0 && exist_secs <= secs)
			return;
	}

	EXEC SQL DELETE SEMAM.NW_TODAY_TICKETS;
	// Copy All tickets entered today or modified today
	EXEC SQL INSERT INTO SEMAM.NW_TODAY_TICKETS (TRANS_NUM, TR_VERSION, PORTFOLIO, TICKET_NUM, TRADE_DATE, 
					VALUE_DATE, MATURITY_DATE, EXERCISE_DATE, TRANS_TYPE, DIR, TRANS_BUCKET, TOTAL_NOM_AMOUNT, 
					PRICE, TR_RATE, RATE_BASIS, FLOAT_RATE_INDEX, FLOAT_RATE_FORMULA, ACCRUAL_FLAG, ASSET_CODE, 
					COUNTERPARTY, CON_CODE, SWAP_CODE, ORIG_SW_BOOKING, ORIG_SW_MATURITY, OPTION_BACKING, 
					EXERCISE_PRICE, LEV_RATE, CURRENCY, FXRATE, BROKER, BR_FEES, OPT_EXPIRATION, DEAL_TYPE, 
					TRADER_INI, CUSTODIAN, PFU, HAN_DETAIL1, HAN_DETAIL2, REPO_PRICE, ACC_FLAG, REPO_FXRATE, 
					MODIFICATION_LEVEL, NEW_ISSUE, FX_ACCNUM, USD_ACCNUM, REPO_INT_BENEFIT, OPT_TICK, OPT_SET_CODE, 
					OPT_SET_CODE2, SET_CONVENTION, OPT_ID, DOC_REQ, DOC_RECVD, EURO_OPT, OPT_AUTO, CONFIRM, WI, 
					TRANS_SEQ, FX_DATE, CP_TRADE_ID, MARGIN, SWAP_TICKET, DELIVERY_DATE, MARGIN_CURRENCY, 
					MARGIN_AMOUNT, LISTED, CLEAN_PRICE, FUNDED_SWAP, DV01, BINARY, SOFTDOLLAR, VAR, BEST_EXECUTION, 
					SHORT_SALE, SEC_FEE, OR_FEE, EXEC_TIME, ETRADE, CSPB_SHORT, OPEN_REPO, BASE_CURRENCY, 
					DEF_ACCOUNT, DEF_CUSTODIAN, ACCOUNTANT, WRK_TRANS_NUM, DELETED, BOOKER, BOOK_DATE, USER_STAMP, 
					DATE_STAMP, CH_USER, CH_DATE, INV_NUM, INV_ASSET, NOM_AMOUNT, ACTUAL_CLOSING, ACTUAL_VDATE, 
					INT_AMOUNT, INV_CURRENCY, TR_DESC, FOREX_REF_NUM, ACC_CODE, CROSS_RATE, POST_DATE, CASH_AMOUNT, 
					ASSIGN_CP, ASSIGN_CT, CASH_LOCK, PAY_LOCK, SET_FX, REF_FX, STATUS, INV_USER_STAMP, INV_DATE_STAMP, 
					INV_CH_USER, INV_CH_DATE) 
			 SELECT DISTINCT TRANS_NUM, TR_VERSION, PORTFOLIO, TICKET_NUM, TRADE_DATE, VALUE_DATE, MATURITY_DATE, 
					EXERCISE_DATE, TRANS_TYPE, DIR, TRANS_BUCKET, TOTAL_NOM_AMOUNT, PRICE, TR_RATE, RATE_BASIS, 
					FLOAT_RATE_INDEX, FLOAT_RATE_FORMULA, ACCRUAL_FLAG, ASSET_CODE, COUNTERPARTY, CON_CODE, SWAP_CODE, 
					ORIG_SW_BOOKING, ORIG_SW_MATURITY, OPTION_BACKING, EXERCISE_PRICE, LEV_RATE, CURRENCY, FXRATE, 
					BROKER, BR_FEES, OPT_EXPIRATION, DEAL_TYPE, TRADER_INI, CUSTODIAN, PFU, HAN_DETAIL1, HAN_DETAIL2, 
					REPO_PRICE, ACC_FLAG, REPO_FXRATE, MODIFICATION_LEVEL, NEW_ISSUE, FX_ACCNUM, USD_ACCNUM, 
					REPO_INT_BENEFIT, OPT_TICK, OPT_SET_CODE, OPT_SET_CODE2, SET_CONVENTION, OPT_ID, DOC_REQ, DOC_RECVD, 
					EURO_OPT, OPT_AUTO, CONFIRM, WI, TRANS_SEQ, FX_DATE, CP_TRADE_ID, MARGIN, SWAP_TICKET, DELIVERY_DATE, 
					MARGIN_CURRENCY, MARGIN_AMOUNT, LISTED, CLEAN_PRICE, FUNDED_SWAP, DV01, BINARY, SOFTDOLLAR, VAR, 
					BEST_EXECUTION, SHORT_SALE, SEC_FEE, OR_FEE, EXEC_TIME, ETRADE, CSPB_SHORT, OPEN_REPO, BASE_CURRENCY, 
					DEF_ACCOUNT, DEF_CUSTODIAN, ACCOUNTANT, WRK_TRANS_NUM, NULL "DELETED", BOOKER, BOOK_DATE, USER_STAMP, 
					DATE_STAMP, CH_USER, CH_DATE, INV_NUM, INV_ASSET, NOM_AMOUNT, ACTUAL_CLOSING, ACTUAL_VDATE, 
					INT_AMOUNT, INV_CURRENCY, TR_DESC, FOREX_REF_NUM, ACC_CODE, CROSS_RATE, POST_DATE, CASH_AMOUNT, 
					ASSIGN_CP, ASSIGN_CT, CASH_LOCK, PAY_LOCK, SET_FX, REF_FX, STATUS, INV_USER_STAMP, INV_DATE_STAMP, 
					INV_CH_USER, INV_CH_DATE
			FROM 
			(
				SELECT DISTINCT A.TRANS_NUM, TR_VERSION, A.PORTFOLIO, A.TICKET_NUM, A.TRADE_DATE, VALUE_DATE, 
					MATURITY_DATE, EXERCISE_DATE, TRANS_TYPE, DIR, TRANS_BUCKET, TOTAL_NOM_AMOUNT, PRICE, TR_RATE, 
					RATE_BASIS, FLOAT_RATE_INDEX, FLOAT_RATE_FORMULA, ACCRUAL_FLAG, ASSET_CODE, COUNTERPARTY, 
					CON_CODE, SWAP_CODE, ORIG_SW_BOOKING, ORIG_SW_MATURITY, OPTION_BACKING, EXERCISE_PRICE, LEV_RATE, 
					CURRENCY, FXRATE, BROKER, BR_FEES, OPT_EXPIRATION, DEAL_TYPE, TRADER_INI, CUSTODIAN, PFU, 
					HAN_DETAIL1, HAN_DETAIL2, REPO_PRICE, ACC_FLAG, REPO_FXRATE, MODIFICATION_LEVEL, NEW_ISSUE, 
					FX_ACCNUM, USD_ACCNUM, REPO_INT_BENEFIT, OPT_TICK, OPT_SET_CODE, OPT_SET_CODE2, SET_CONVENTION, 
					OPT_ID, DOC_REQ, DOC_RECVD, EURO_OPT, OPT_AUTO, CONFIRM, WI, TRANS_SEQ, FX_DATE, CP_TRADE_ID, 
					MARGIN, SWAP_TICKET, DELIVERY_DATE, MARGIN_CURRENCY, MARGIN_AMOUNT, LISTED, CLEAN_PRICE, 
					FUNDED_SWAP, DV01, BINARY, SOFTDOLLAR, VAR, BEST_EXECUTION, SHORT_SALE, SEC_FEE, OR_FEE, EXEC_TIME, 
					ETRADE, CSPB_SHORT, OPEN_REPO, BASE_CURRENCY, DEF_ACCOUNT, DEF_CUSTODIAN, ACCOUNTANT, 
					TO_NUMBER(NULL) "WRK_TRANS_NUM", DECODE(SIGN(B.TRANS_NUM), 1, 'Y') "DELETED", BOOKER, BOOK_DATE, 
					USER_STAMP, DATE_STAMP, NULL "CH_USER", TO_DATE(NULL) "CH_DATE", INV_NUM, INV_ASSET, NOM_AMOUNT, 
					ACTUAL_CLOSING, ACTUAL_VDATE, INT_AMOUNT, INV_CURRENCY, TR_DESC, FOREX_REF_NUM, ACC_CODE, 
					CROSS_RATE, POST_DATE, CASH_AMOUNT, ASSIGN_CP, ASSIGN_CT, CASH_LOCK, PAY_LOCK, SET_FX, REF_FX, 
					'N' "STATUS", INV_USER_STAMP, INV_DATE_STAMP, NULL "INV_CH_USER", TO_DATE(NULL) "INV_CH_DATE" 					
				FROM SEMAM.V_TR_TICKETS_INV A, SEMAM.NW_CC_TICKETS B 
				WHERE B.TRANS_NUM(+) = A.TRANS_NUM 
				UNION 
				SELECT DISTINCT NVL(C_TRANS_NUM, A.TRANS_NUM) "TRANS_NUM", TR_VERSION, A.PORTFOLIO, 
					NVL(TO_CHAR(C_TICKET), A.TICKET_NUM) "TICKET_NUM", A.TRADE_DATE, VALUE_DATE, MATURITY_DATE, 
					EXERCISE_DATE, TRANS_TYPE, DIR, TRANS_BUCKET, TOTAL_NOM_AMOUNT, PRICE, TR_RATE, RATE_BASIS, 
					FLOAT_RATE_INDEX, FLOAT_RATE_FORMULA, ACCRUAL_FLAG, ASSET_CODE, COUNTERPARTY, CON_CODE, SWAP_CODE, 
					ORIG_SW_BOOKING, ORIG_SW_MATURITY, OPTION_BACKING, EXERCISE_PRICE, LEV_RATE, CURRENCY, FXRATE, 
					BROKER, BR_FEES, OPT_EXPIRATION, DEAL_TYPE, TRADER_INI, CUSTODIAN, PFU, HAN_DETAIL1, HAN_DETAIL2, 
					REPO_PRICE, ACC_FLAG, REPO_FXRATE, MODIFICATION_LEVEL, NEW_ISSUE, FX_ACCNUM, USD_ACCNUM, 
					REPO_INT_BENEFIT, OPT_TICK, OPT_SET_CODE, OPT_SET_CODE2, SET_CONVENTION, OPT_ID, DOC_REQ, 
					DOC_RECVD, EURO_OPT, OPT_AUTO, CONFIRM, WI, TRANS_SEQ, FX_DATE, CP_TRADE_ID, MARGIN, SWAP_TICKET, 
					DELIVERY_DATE, MARGIN_CURRENCY, MARGIN_AMOUNT, LISTED, CLEAN_PRICE, FUNDED_SWAP, DV01, BINARY, 
					SOFTDOLLAR, VAR, BEST_EXECUTION, SHORT_SALE, SEC_FEE, OR_FEE, EXEC_TIME, ETRADE, CSPB_SHORT, 
					OPEN_REPO, BASE_CURRENCY, DEF_ACCOUNT, DEF_CUSTODIAN, ACCOUNTANT, B.TRANS_NUM "WRK_TRANS_NUM", 
					DECODE(B.CC_TYPE, 'CANCEL', 'Y', NULL) "DELETED", BOOKER, BOOK_DATE, USER_STAMP, DATE_STAMP, 
					NULL "CH_USER", TO_DATE(NULL) "CH_DATE", INV_NUM, INV_ASSET, NOM_AMOUNT, ACTUAL_CLOSING, 
					ACTUAL_VDATE, INT_AMOUNT, INV_CURRENCY, TR_DESC, FOREX_REF_NUM, ACC_CODE, CROSS_RATE, POST_DATE, 
					CASH_AMOUNT, ASSIGN_CP, ASSIGN_CT, CASH_LOCK, PAY_LOCK, SET_FX, REF_FX, 
					DECODE(B.CC_TYPE, 'CORRECT', 'M', 'N') "STATUS", INV_USER_STAMP, INV_DATE_STAMP, NULL "INV_CH_USER", 
					TO_DATE(NULL) "INV_CH_DATE" 
				FROM SEMAM.V_TR_TICKETS_INV A, SEMAM.NW_CC_TICKETS B 
				WHERE B.TRANS_NUM(+) = A.TRANS_NUM 
			)
			WHERE DELETED IS NULL 
			AND TRANS_NUM IS NOT NULL 
			AND (TRADE_DATE = :GUT_date OR TRUNC(DATE_STAMP) = :GUT_date OR TRUNC(INV_DATE_STAMP) = :GUT_date);
			 
					
					// Insert modified tickets
	EXEC SQL INSERT INTO SEMAM.NW_TODAY_TICKETS (TRANS_NUM, TR_VERSION, PORTFOLIO, TICKET_NUM, TRADE_DATE, VALUE_DATE, 
					MATURITY_DATE, EXERCISE_DATE, TRANS_TYPE, DIR, TRANS_BUCKET, TOTAL_NOM_AMOUNT, PRICE, TR_RATE, 
					RATE_BASIS, FLOAT_RATE_INDEX, FLOAT_RATE_FORMULA, ACCRUAL_FLAG, ASSET_CODE, COUNTERPARTY, CON_CODE, 
					SWAP_CODE, ORIG_SW_BOOKING, ORIG_SW_MATURITY, OPTION_BACKING, EXERCISE_PRICE, LEV_RATE, CURRENCY, 
					FXRATE, BROKER, BR_FEES, OPT_EXPIRATION, DEAL_TYPE, TRADER_INI, CUSTODIAN, PFU, HAN_DETAIL1, 
					HAN_DETAIL2, REPO_PRICE, ACC_FLAG, REPO_FXRATE, MODIFICATION_LEVEL, NEW_ISSUE, FX_ACCNUM, USD_ACCNUM, 
					REPO_INT_BENEFIT, OPT_TICK, OPT_SET_CODE, OPT_SET_CODE2, SET_CONVENTION, OPT_ID, DOC_REQ, DOC_RECVD, 
					EURO_OPT, OPT_AUTO, CONFIRM, WI, TRANS_SEQ, FX_DATE, CP_TRADE_ID, MARGIN, SWAP_TICKET, DELIVERY_DATE, 
					MARGIN_CURRENCY, MARGIN_AMOUNT, LISTED, CLEAN_PRICE, FUNDED_SWAP, DV01, BINARY, SOFTDOLLAR, VAR, 
					BEST_EXECUTION, SHORT_SALE, SEC_FEE, OR_FEE, EXEC_TIME, ETRADE, CSPB_SHORT, OPEN_REPO, BASE_CURRENCY, 
					DEF_ACCOUNT, DEF_CUSTODIAN, ACCOUNTANT, WRK_TRANS_NUM, DELETED, BOOKER, BOOK_DATE, USER_STAMP, 
					DATE_STAMP, CH_USER, CH_DATE, INV_NUM, INV_ASSET, NOM_AMOUNT, ACTUAL_CLOSING, ACTUAL_VDATE, INT_AMOUNT, 
					INV_CURRENCY, TR_DESC, FOREX_REF_NUM, ACC_CODE, CROSS_RATE, POST_DATE, CASH_AMOUNT, ASSIGN_CP, ASSIGN_CT, 
					CASH_LOCK, PAY_LOCK, SET_FX, REF_FX, STATUS, INV_USER_STAMP, INV_DATE_STAMP, INV_CH_USER, INV_CH_DATE)

				// Insert deleted tickets
			 SELECT A.TRANS_NUM, TR_VERSION, PORTFOLIO, TICKET_NUM, TRADE_DATE, VALUE_DATE, MATURITY_DATE, EXERCISE_DATE, 
					TRANS_TYPE, DIR, TRANS_BUCKET, TOTAL_NOM_AMOUNT, PRICE, TR_RATE, RATE_BASIS, FLOAT_RATE_INDEX, 
					FLOAT_RATE_FORMULA, ACCRUAL_FLAG, ASSET_CODE, COUNTERPARTY, CON_CODE, SWAP_CODE, ORIG_SW_BOOKING, 
					ORIG_SW_MATURITY, OPTION_BACKING, EXERCISE_PRICE, LEV_RATE, CURRENCY, FXRATE, BROKER, BR_FEES, 
					OPT_EXPIRATION, DEAL_TYPE, TRADER_INI, CUSTODIAN, PFU, HAN_DETAIL1, HAN_DETAIL2, REPO_PRICE, ACC_FLAG, 
					REPO_FXRATE, MODIFICATION_LEVEL, NEW_ISSUE, FX_ACCNUM, USD_ACCNUM, REPO_INT_BENEFIT, OPT_TICK, 
					OPT_SET_CODE, OPT_SET_CODE2, SET_CONVENTION, OPT_ID, DOC_REQ, DOC_RECVD, EURO_OPT, OPT_AUTO, CONFIRM, 
					WI, TRANS_SEQ, FX_DATE, CP_TRADE_ID, MARGIN, SWAP_TICKET, DELIVERY_DATE, MARGIN_CURRENCY, 
					MARGIN_AMOUNT, LISTED, CLEAN_PRICE, FUNDED_SWAP, DV01, BINARY, SOFTDOLLAR, VAR, BEST_EXECUTION, 
					SHORT_SALE, SEC_FEE, OR_FEE, EXEC_TIME, ETRADE, CSPB_SHORT, OPEN_REPO, BASE_CURRENCY, DEF_ACCOUNT, 
					DEF_CUSTODIAN, ACCOUNTANT, WRK_TRANS_NUM, DELETED, BOOKER, BOOK_DATE, USER_STAMP, DATE_STAMP, CH_USER, 
					CH_DATE, INV_NUM, INV_ASSET, NOM_AMOUNT, ACTUAL_CLOSING, ACTUAL_VDATE, INT_AMOUNT, INV_CURRENCY, 
					TR_DESC, FOREX_REF_NUM, ACC_CODE, CROSS_RATE, POST_DATE, CASH_AMOUNT, ASSIGN_CP, ASSIGN_CT, 
					CASH_LOCK, PAY_LOCK, SET_FX, REF_FX, 'H', INV_USER_STAMP, INV_DATE_STAMP, INV_CH_USER, INV_CH_DATE 
			 FROM SEMAM.V_DELETE_TICKETS_INV A
				  WHERE TRUNC(A.CH_DATE) = :GUT_date 
			 UNION 
			 // Get original ticket for Modified trade.
				 SELECT A.TRANS_NUM, A.TR_VERSION, A.PORTFOLIO, A.TICKET_NUM, A.TRADE_DATE, A.VALUE_DATE, A.MATURITY_DATE, 
					A.EXERCISE_DATE, A.TRANS_TYPE, A.DIR, A.TRANS_BUCKET, A.NOM_AMOUNT, A.PRICE, A.TR_RATE, A.RATE_BASIS, 
					A.FLOAT_RATE_INDEX, A.FLOAT_RATE_FORMULA, A.ACCRUAL_FLAG, A.ASSET_CODE, A.COUNTERPARTY, A.CON_CODE, 
					A.SWAP_CODE, A.ORIG_SW_BOOKING, A.ORIG_SW_MATURITY, A.OPTION_BACKING, A.EXERCISE_PRICE, A.LEV_RATE, 
					A.CURRENCY, A.FXRATE, A.BROKER, A.BR_FEES, A.OPT_EXPIRATION, A.DEAL_TYPE, A.TRADER_INI, A.CUSTODIAN, 
					A.PFU, A.HAN_DETAIL1, A.HAN_DETAIL2, A.REPO_PRICE, A.ACC_FLAG, A.REPO_FXRATE, A.MODIFICATION_LEVEL, 
					A.NEW_ISSUE, A.FX_ACCNUM, A.USD_ACCNUM, A.REPO_INT_BENEFIT, A.OPT_TICK, A.OPT_SET_CODE, A.OPT_SET_CODE2, 
					A.SET_CONVENTION, A.OPT_ID, A.DOC_REQ, A.DOC_RECVD, A.EURO_OPT, A.OPT_AUTO, A.CONFIRM, A.WI, A.TRANS_SEQ, 
					A.FX_DATE, A.CP_TRADE_ID, A.MARGIN, A.SWAP_TICKET, A.DELIVERY_DATE, A.MARGIN_CURRENCY, A.MARGIN_AMOUNT, 
					A.LISTED, A.CLEAN_PRICE, A.FUNDED_SWAP, A.DV01, A.BINARY, A.SOFTDOLLAR, A.VAR, A.BEST_EXECUTION, 
					A.SHORT_SALE, A.SEC_FEE, A.OR_FEE, A.EXEC_TIME, A.ETRADE, A.CSPB_SHORT, A.OPEN_REPO, A.BASE_CURRENCY, 
					A.DEF_ACCOUNT, A.DEF_CUSTODIAN, A.ACCOUNTANT, TO_NUMBER(NULL), NULL, A.BOOKER, A.BOOK_DATE, A.USER_STAMP, 
					A.DATE_STAMP, A.USER_STAMP, A.DATE_STAMP, A.INV_NUM, A.ASSET_CODE, A.NOM_AMOUNT, A.ACTUAL_CLOSING, 
					A.ACTUAL_VDATE, A.INT_AMOUNT, A.CURRENCY, A.TR_DESC, A.FOREX_REF_NUM, A.ACC_CODE, A.CROSS_RATE, 
					A.POST_DATE, A.CASH_AMOUNT, A.ASSIGN_CP, A.ASSIGN_CT, A.CASH_LOCK, A.PAY_LOCK, A.SET_FX, A.REF_FX, 'H', 
					A.USER_STAMP, A.DATE_STAMP, A.USER_STAMP, A.DATE_STAMP 
			 FROM SEMAM.V_TR_TICKETS_INV A, SEMAM.NW_TODAY_TICKETS C 
			 WHERE C.TRANS_NUM = A.TRANS_NUM 
					AND C.STATUS = 'M' 
					AND TRUNC(A.DATE_STAMP) = :GUT_date 					
			 UNION 
			 // Get Modified the ticket
			 SELECT A.TRANS_NUM, A.TR_VERSION, A.PORTFOLIO, A.TICKET_NUM, A.TRADE_DATE, A.VALUE_DATE, A.MATURITY_DATE, 
					A.EXERCISE_DATE, A.TRANS_TYPE, A.DIR, A.TRANS_BUCKET, A.NOM_AMOUNT, A.PRICE, A.TR_RATE, A.RATE_BASIS, 
					A.FLOAT_RATE_INDEX, A.FLOAT_RATE_FORMULA, A.ACCRUAL_FLAG, A.ASSET_CODE, A.COUNTERPARTY, A.CON_CODE, 
					A.SWAP_CODE, A.ORIG_SW_BOOKING, A.ORIG_SW_MATURITY, A.OPTION_BACKING, A.EXERCISE_PRICE, A.LEV_RATE, 
					A.CURRENCY, A.FXRATE, A.BROKER, A.BR_FEES, A.OPT_EXPIRATION, A.DEAL_TYPE, A.TRADER_INI, A.CUSTODIAN, 
					A.PFU, A.HAN_DETAIL1, A.HAN_DETAIL2, A.REPO_PRICE, A.ACC_FLAG, A.REPO_FXRATE, A.MODIFICATION_LEVEL, 
					A.NEW_ISSUE, A.FX_ACCNUM, A.USD_ACCNUM, A.REPO_INT_BENEFIT, A.OPT_TICK, A.OPT_SET_CODE, A.OPT_SET_CODE2, 
					A.SET_CONVENTION, A.OPT_ID, A.DOC_REQ, A.DOC_RECVD, A.EURO_OPT, A.OPT_AUTO, A.CONFIRM, A.WI, A.TRANS_SEQ, 
					A.FX_DATE, A.CP_TRADE_ID, A.MARGIN, A.SWAP_TICKET, A.DELIVERY_DATE, A.MARGIN_CURRENCY, A.MARGIN_AMOUNT, 
					A.LISTED, A.CLEAN_PRICE, A.FUNDED_SWAP, A.DV01, A.BINARY, A.SOFTDOLLAR, A.VAR, A.BEST_EXECUTION, A.SHORT_SALE, 
					A.SEC_FEE, A.OR_FEE, A.EXEC_TIME, A.ETRADE, A.CSPB_SHORT, A.OPEN_REPO, Z.BASE_CURRENCY, Z.DEF_ACCOUNT, 
					Z.DEF_CUSTODIAN, Z.ACCOUNTANT, TO_NUMBER(NULL), NULL, A.BOOKER, A.BOOK_DATE, A.USER_STAMP, A.DATE_STAMP, 
					A.CH_USER, A.CH_DATE, B.INV_NUM, B.ASSET_CODE, B.NOM_AMOUNT, B.ACTUAL_CLOSING, B.ACTUAL_VDATE, B.INT_AMOUNT, 
					B.CURRENCY, B.TR_DESC, B.FOREX_REF_NUM, B.ACC_CODE, B.CROSS_RATE, B.POST_DATE, B.CASH_AMOUNT, B.ASSIGN_CP, 
					B.ASSIGN_CT, DECODE(B.POST_DATE, NULL, 0, 1) "CASH_LOCK", DECODE(D.INV_NUM, NULL, 0, 1) "PAY_LOCK", 
					DECODE(A.TRANS_TYPE, 'REPO', DECODE(B.TR_DESC, 'MATURITY', NVL(A.REPO_FXRATE, B.CROSS_RATE), NVL(A.FXRATE, B.CROSS_RATE)), 
										 'LEVERAGE', DECODE(B.TR_DESC, 'MATURITY', B.CROSS_RATE, NVL(A.FXRATE, B.CROSS_RATE)), NVL(A.FXRATE, B.CROSS_RATE)) "SET_FX", 
					DECODE(A.TRANS_TYPE, 'REPO', DECODE(B.TR_DESC, 'MATURITY', NVL(A.REPO_FXRATE, NVL(B.CROSS_RATE, E.FXRATE)), NVL(A.FXRATE, NVL(B.CROSS_RATE, E.FXRATE))), 
										 'LEVERAGE', DECODE(B.TR_DESC, 'MATURITY', NVL(B.CROSS_RATE, E.FXRATE), NVL(A.FXRATE, NVL(B.CROSS_RATE, E.FXRATE))), 
										 NVL(A.FXRATE, NVL(B.CROSS_RATE, E.FXRATE))) "REF_FX", 
					'H', B.USER_STAMP, B.DATE_STAMP, B.USER_STAMP, B.DATE_STAMP 
			 FROM SEMAM.V_TICKETS_HIST A, SEMAM.NW_TR_INV B, SEMAM.NW_TODAY_TICKETS C, 
					SEMAM.NW_PAYMENT_DETAILS D, SEMAM.V_TICKETS E, SEMAM.NW_PORTFOLIOS Z
			 WHERE B.TRANS_NUM = A.TRANS_NUM 
					AND C.TRANS_NUM = A.TRANS_NUM 
					AND D.INV_NUM(+) = B.INV_NUM 
					AND E.TRANS_NUM(+) = B.FOREX_REF_NUM 
					AND E.TRANS_TYPE(+) = 'FOREX' 
					AND Z.PORTFOLIO = A.PORTFOLIO 
					AND Z.STATUS IS NULL 
					AND A.MODIFICATION_LEVEL = 'M' 
					AND TRUNC(A.CH_DATE) = :GUT_date 					
			 UNION 
			 SELECT A.TRANS_NUM, A.TR_VERSION, A.PORTFOLIO, A.TICKET_NUM, A.TRADE_DATE, A.VALUE_DATE, A.MATURITY_DATE, 
					A.EXERCISE_DATE, A.TRANS_TYPE, A.DIR, A.TRANS_BUCKET, A.NOM_AMOUNT, A.PRICE, A.TR_RATE, A.RATE_BASIS, 
					A.FLOAT_RATE_INDEX, A.FLOAT_RATE_FORMULA, A.ACCRUAL_FLAG, A.ASSET_CODE, A.COUNTERPARTY, A.CON_CODE, 
					A.SWAP_CODE, A.ORIG_SW_BOOKING, A.ORIG_SW_MATURITY, A.OPTION_BACKING, A.EXERCISE_PRICE, A.LEV_RATE, 
					A.CURRENCY, A.FXRATE, A.BROKER, A.BR_FEES, A.OPT_EXPIRATION, A.DEAL_TYPE, A.TRADER_INI, A.CUSTODIAN, 
					A.PFU, A.HAN_DETAIL1, A.HAN_DETAIL2, A.REPO_PRICE, A.ACC_FLAG, A.REPO_FXRATE, A.MODIFICATION_LEVEL, 
					A.NEW_ISSUE, A.FX_ACCNUM, A.USD_ACCNUM, A.REPO_INT_BENEFIT, A.OPT_TICK, A.OPT_SET_CODE, A.OPT_SET_CODE2, 
					A.SET_CONVENTION, A.OPT_ID, A.DOC_REQ, A.DOC_RECVD, A.EURO_OPT, A.OPT_AUTO, A.CONFIRM, A.WI, A.TRANS_SEQ, 
					A.FX_DATE, A.CP_TRADE_ID, A.MARGIN, A.SWAP_TICKET, A.DELIVERY_DATE, A.MARGIN_CURRENCY, A.MARGIN_AMOUNT, 
					A.LISTED, A.CLEAN_PRICE, A.FUNDED_SWAP, A.DV01, A.BINARY, A.SOFTDOLLAR, A.VAR, A.BEST_EXECUTION, A.SHORT_SALE, 
					A.SEC_FEE, A.OR_FEE, A.EXEC_TIME, A.ETRADE, A.CSPB_SHORT, A.OPEN_REPO, Z.BASE_CURRENCY, Z.DEF_ACCOUNT, 
					Z.DEF_CUSTODIAN, Z.ACCOUNTANT, TO_NUMBER(NULL), NULL, A.BOOKER, A.BOOK_DATE, A.USER_STAMP, A.DATE_STAMP, 
					A.USER_STAMP, A.DATE_STAMP, B.INV_NUM, B.ASSET_CODE, B.NOM_AMOUNT, B.ACTUAL_CLOSING, B.ACTUAL_VDATE, 
					B.INT_AMOUNT, B.CURRENCY, B.TR_DESC, B.FOREX_REF_NUM, B.ACC_CODE, B.CROSS_RATE, B.POST_DATE, B.CASH_AMOUNT, 
					B.ASSIGN_CP, B.ASSIGN_CT, DECODE(B.POST_DATE, NULL, 0, 1) "CASH_LOCK", DECODE(D.INV_NUM, NULL, 0, 1) "PAY_LOCK", 
					DECODE(A.TRANS_TYPE, 'REPO', DECODE(B.TR_DESC, 'MATURITY', NVL(A.REPO_FXRATE, B.CROSS_RATE), NVL(A.FXRATE, B.CROSS_RATE)), 
										 'LEVERAGE', DECODE(B.TR_DESC, 'MATURITY', B.CROSS_RATE, NVL(A.FXRATE, B.CROSS_RATE)), NVL(A.FXRATE, B.CROSS_RATE)) "SET_FX", 
					DECODE(A.TRANS_TYPE, 'REPO', DECODE(B.TR_DESC, 'MATURITY', NVL(A.REPO_FXRATE, NVL(B.CROSS_RATE, E.FXRATE)), NVL(A.FXRATE, NVL(B.CROSS_RATE, E.FXRATE))), 
										 'LEVERAGE', DECODE(B.TR_DESC, 'MATURITY', NVL(B.CROSS_RATE, E.FXRATE), NVL(A.FXRATE, NVL(B.CROSS_RATE, E.FXRATE))), 
										 NVL(A.FXRATE, NVL(B.CROSS_RATE, E.FXRATE))) "REF_FX", 
					'H', B.USER_STAMP, B.DATE_STAMP, B.CH_USER, B.CH_DATE 
			 FROM SEMAM.NW_TODAY_TICKETS A, SEMAM.NW_INV_HIST B, SEMAM.NW_PAYMENT_DETAILS D, 
					SEMAM.V_TICKETS E, SEMAM.NW_PORTFOLIOS Z
			 WHERE B.TRANS_NUM = A.TRANS_NUM 
					AND TRUNC(B.CH_DATE) = :GUT_date  
					AND B.INV_NUM = A.INV_NUM 
					AND (B.TR_DESC != A.TR_DESC OR 
						 NVL(B.CURRENCY, A.CURRENCY) != NVL(A.CURRENCY, A.CURRENCY) OR 
     					 NVL(B.ACC_CODE, '9') != NVL(A.ACC_CODE, '9') OR 
						 NVL(B.ACTUAL_VDATE, TO_DATE('30-NOV-88')) != NVL(A.ACTUAL_VDATE, TO_DATE('30-NOV-88')) OR 
						 NVL(B.CROSS_RATE, 0) != NVL(A.CROSS_RATE, 0)) 
					AND D.INV_NUM(+) = B.INV_NUM 
					AND E.TRANS_NUM(+) = B.FOREX_REF_NUM 
					AND E.TRANS_TYPE(+) = 'FOREX' 
					AND Z.PORTFOLIO = A.PORTFOLIO 
					AND Z.STATUS IS NULL;

	EXEC SQL UPDATE SEMAM.NW_TODAY_TICKETS SET INDATE = :GUT_date, CREATE_DATE = SYSDATE;
	return;

Liblabel:
	SqlError("getTodaysTrades", 1);
	return;
}


void getTrades2(const char *date, const char *assign_cp, const char *FundSql, int bCP)
{
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR GUT_sqlstat[10000],
		GUT_assign_cp[21],
		GUT_date[10],
		GUT_ticket_num[11],
		GUT_uploadType[2],
		GUT_datestamp[21],
		GUT_uploaded[2];
		
		long int GUT_trans_num;
		short GUT_ind;
	EXEC SQL END DECLARE SECTION;

	getTodaysTrades(date, 0);

	printf("\nGetUploadedTrades");
	
	SaveCopy(GUT_date.arr, sizeof(GUT_date.arr), date, 0);
	SaveCopy(GUT_assign_cp.arr, sizeof(GUT_assign_cp.arr), assign_cp, 0);
	GUT_date.len = strlen(GUT_date.arr);
	GUT_assign_cp.len = strlen(GUT_assign_cp.arr);
	
	// New Tickets 
	strcpy_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT DISTINCT A.TRANS_NUM, "
			"A.TICKET_NUM, 'N', NVL(D.UPLOADED, 'N') ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.NW_TODAY_TICKETS A, "
			"SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE D.TRANS_NUM(+) = A.TRANS_NUM "			
			"AND D.UPLOAD_TYPE(+) = 'N' "
			"AND A.STATUS = 'N' "
			"AND A.TRADE_DATE = :d1 ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d2 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d2 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	// Deleted Tickets 
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM, 'D', 'N' ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.NW_TODAY_TICKETS A, "
			"SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE D.TRANS_NUM = A.TRANS_NUM "
			"AND D.DATE_STAMP < A.CH_DATE "
			"AND D.UPLOAD_TYPE != 'D' "
			"AND D.UPLOADED = 'Y' "			
			"AND A.DELETED = 'D' ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d3 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d3 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	// Modified Tickets
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT DISTINCT A.TRANS_NUM, A.TICKET_NUM, "
			"'M', DECODE(SIGN(A.DATE_STAMP - D.DATE_STAMP), 1, 'N', 'Y') ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.NW_TODAY_TICKETS A, "
		"SEMAM.NW_TODAY_TICKETS B, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.TRANS_NUM = A.TRANS_NUM "
		"AND B.STATUS = 'H' "		
		"AND B.MODIFICATION_LEVEL = 'M' "
		"AND D.TRANS_NUM = A.TRANS_NUM "		
		"AND D.UPLOAD_TYPE != 'D' "
		"AND D.UPLOADED = 'Y' "
		"AND A.STATUS = 'N' ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d4 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d4 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	// 
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT DISTINCT A.TRANS_NUM, A.TICKET_NUM, "
			"'M' , DECODE(SIGN(A.INV_DATE_STAMP - D.DATE_STAMP), 1, 'N', 'Y') ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.NW_TODAY_TICKETS A, "
		"SEMAM.NW_TODAY_TICKETS B, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.TRANS_NUM = A.TRANS_NUM "
		"AND B.STATUS = 'H' "
		"AND B.INV_NUM = A.INV_NUM "
		"AND (B.TR_DESC != A.TR_DESC OR "
			"NVL(B.INV_CURRENCY, A.CURRENCY) != NVL(A.INV_CURRENCY, A.CURRENCY) OR "
     		"NVL(B.ACC_CODE, '9') != NVL(A.ACC_CODE, '9') OR "
			"NVL(B.ACTUAL_VDATE, TO_DATE('30-NOV-88')) != NVL(A.ACTUAL_VDATE, TO_DATE('30-NOV-88')) OR "
			"NVL(B.CROSS_RATE, 0) != NVL(A.CROSS_RATE, 0)) "
		"AND D.TRANS_NUM = A.TRANS_NUM "		
		"AND D.UPLOAD_TYPE != 'D' "
		"AND D.UPLOADED = 'Y' "
		"AND A.STATUS = 'N' ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d5 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d5 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM, "
			"'M', DECODE(SIGN(B.DATE_STAMP - D.DATE_STAMP), 1, 'N', 'Y') ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.NW_TODAY_TICKETS A, "
			"SEMAM.NW_ASSETS B, SEMAM.NW_ASSETS_HIST C, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.ASS_CODE = A.ASSET_CODE "
			"AND C.ASS_CODE = A.ASSET_CODE "
			"AND C.ASS_CODE = B.ASS_CODE "
			"AND TRUNC(C.CH_DATE) = TRUNC(B.DATE_STAMP) " 
			"AND TRUNC(B.DATE_STAMP) = :d6 "
			"AND (C.ASS_CURRENCY != B.ASS_CURRENCY OR "
			"C.ASS_ACCRUABLE != B.ASS_ACCRUABLE OR "
			"C.ASS_PPAID_INT != B.ASS_PPAID_INT OR "
				"NVL(C.ASS_CURRENCY2, 'X') != NVL(B.ASS_CURRENCY2, 'X') OR "
				"NVL(C.ASS_INT_TYPE, 'X') != NVL(B.ASS_INT_TYPE, 'X') OR "
				"NVL(C.ASS_RATE_BASIS, 'X') != NVL(B.ASS_RATE_BASIS, 'X') OR "
				"NVL(C.ASS_COUPON_START_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_COUPON_START_DATE, TO_DATE('30-NOV-88')) OR "
				"NVL(C.ASS_BEGIN_ROLL_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_BEGIN_ROLL_DATE, TO_DATE('30-NOV-88')) OR "
				"NVL(C.ASS_MATURITY_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_MATURITY_DATE, TO_DATE('30-NOV-88')) OR "
				"NVL(C.ASS_FX_DATE, TO_DATE('30-NOV-88')) != NVL(B.ASS_FX_DATE, TO_DATE('30-NOV-88'))) "
			"AND D.TRANS_NUM = A.TRANS_NUM "			
			"AND D.UPLOAD_TYPE != 'D' "
			"AND D.UPLOADED = 'Y' "
			"AND A.STATUS = 'N' ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d7 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d7 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);

	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "UNION ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "SELECT A.TRANS_NUM, A.TICKET_NUM, "
			"'M', DECODE(SIGN(B.DATE_STAMP - D.DATE_STAMP), 1, 'N', 'Y') ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "FROM SEMAM.NW_TODAY_TICKETS A, "
			"SEMAM.V_ASSET_RATES B, SEMAM.V_ASSET_RATES_HIST C, SEMAM.V_TRADE_UPLOAD D ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "WHERE B.ASS_CODE = A.ASSET_CODE "
			"AND B.ASS_FROM <= A.VALUE_DATE "
			"AND B.ASS_TO > A.VALUE_DATE "
			"AND C.ASS_CODE = B.ASS_CODE "
			"AND TRUNC(C.CH_DATE) = TRUNC(B.DATE_STAMP) "
			"AND C.ASS_CODE = A.ASSET_CODE "
			"AND C.ASS_FROM <= A.VALUE_DATE "
			"AND C.ASS_TO > A.VALUE_DATE "
			"AND TRUNC(C.CH_DATE) = :d8 "
			"AND (C.ASS_FROM != B.ASS_FROM OR "
				"NVL(C.ASS_TO, TO_DATE('30-NOV-88')) != NVL(B.ASS_TO, TO_DATE('30-NOV-88')) OR "
				"NVL(C.ADJ_ASS_TO, TO_DATE('30-NOV-88')) != NVL(B.ADJ_ASS_TO, TO_DATE('30-NOV-88')) OR "
				"NVL(C.RATE, 0) != NVL(B.RATE, 0) OR "
				"NVL(C.AMORT_FACT, 1) != NVL(B.AMORT_FACT, 1) OR "
				"NVL(C.CAPIT_RATE, 0) != NVL(B.CAPIT_RATE, 0) OR "
				"NVL(C.PLUS_AMOUNT, 0) != NVL(B.PLUS_AMOUNT, 0) OR "
				"NVL(C.ACTION, 'X') != NVL(B.ACTION, 'X') OR "
				"NVL(C.START_DATE, TO_DATE('30-NOV-88')) != NVL(B.START_DATE, TO_DATE('30-NOV-88')) OR "
				"NVL(C.END_DATE, TO_DATE('30-NOV-88')) != NVL(B.END_DATE, TO_DATE('30-NOV-88'))) "
			"AND D.TRANS_NUM = A.TRANS_NUM "			
			"AND D.UPLOAD_TYPE != 'D' "
			"AND D.UPLOADED = 'Y' "
			"AND A.STATUS = 'N' ");
	if(bCP)
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.PFU = 'P' "
				"AND NVL(A.ASSIGN_CP, A.CUSTODIAN) = :d9 ");
	else
		strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "AND A.ACCOUNTANT = :d9 ");
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), FundSql);
	strcat_s(GUT_sqlstat.arr, sizeof(GUT_sqlstat.arr), "ORDER BY 1, 3, 4 ");
						
	GUT_sqlstat.len = strlen(GUT_sqlstat.arr);

	EXEC SQL PREPARE GUP_S6 FROM :GUT_sqlstat;
	EXEC SQL DECLARE GUP_C6 CURSOR FOR GUP_S6;
	EXEC SQL OPEN GUP_C6 USING 	:GUT_date, :GUT_assign_cp, :GUT_assign_cp, :GUT_assign_cp, :GUT_assign_cp, 
								:GUT_date, :GUT_assign_cp, :GUT_date, :GUT_assign_cp;

	EXEC SQL SELECT TO_CHAR(SYSDATE, 'DD-MON-YYYY HH24:MI:SS') INTO :GUT_datestamp FROM DUAL;
	GUT_datestamp.arr[GUT_datestamp.len] = 0;
	for(;;)
	{
		GUT_trans_num = 0;
		EXEC SQL FETCH GUP_C6 INTO :GUT_trans_num:GUT_ind, :GUT_ticket_num:GUT_ind, 
									:GUT_uploadType:GUT_ind, :GUT_uploaded:GUT_ind;

		if(sqlca.sqlcode == 1403)
			break;

		GUT_ticket_num.arr[GUT_ticket_num.len] = 0;		
		GUT_uploadType.arr[GUT_uploadType.len] = 0;
		GUT_uploaded.arr[GUT_uploaded.len] = 0;
		
		if(GUT_uploaded.arr[0] == 'N')
		{
			GUT_ind = 0;
			switch(GUT_uploadType.arr[0])
			{
				case 'D':
					EXEC SQL SELECT COUNT(*) INTO :GUT_ind FROM SEMAM.NW_UPLOAD_PLAN_Q
								WHERE TRANS_NUM = :GUT_trans_num  
								AND UPLOAD_TYPE IN ('N', 'M')
								AND UPLOADED = 'Y';
					break;
				case 'M':
					EXEC SQL SELECT COUNT(*) INTO :GUT_ind FROM SEMAM.NW_UPLOAD_PLAN_Q
							WHERE TRANS_NUM = :GUT_trans_num  
							AND UPLOAD_TYPE IN ('N')
							AND UPLOADED = 'Y';
					break;
				case 'N': 
					EXEC SQL SELECT COUNT(*) INTO :GUT_ind FROM SEMAM.NW_UPLOAD_PLAN_Q
							WHERE TRANS_NUM = :GUT_trans_num  
							AND UPLOAD_TYPE IN ('M', 'D')
							AND UPLOADED = 'Y';
					break;
			}
			
			if((GUT_uploadType.arr[0] == 'D' || GUT_uploadType.arr[0] == 'M') && GUT_ind > 0)
				EXEC SQL UPDATE SEMAM.NW_UPLOAD_PLAN_Q 
							SET UPLOAD_TYPE = :GUT_uploadType,
							UPLOADED = :GUT_uploaded, 
							COUNTERPARTY = :GUT_assign_cp,  
							DATE_STAMP = TO_DATE(:GUT_datestamp, 'DD-MON-YYYY HH24:MI:SS') 
							WHERE TRANS_NUM = :GUT_trans_num;
			else
			{				
				if(GUT_ind == 0)
				{
					EXEC SQL DELETE FROM SEMAM.NW_UPLOAD_PLAN_Q WHERE TRANS_NUM = :GUT_trans_num AND UPLOADED = 'N';
					EXEC SQL INSERT INTO SEMAM.NW_UPLOAD_PLAN_Q (INDATE, TRANS_NUM, TICKET_NUM, UPLOAD_TYPE, 
								UPLOADED, COUNTERPARTY, DATE_STAMP)
								VALUES (:GUT_date, :GUT_trans_num, :GUT_ticket_num, :GUT_uploadType, 
								:GUT_uploaded, :GUT_assign_cp, TO_DATE(:GUT_datestamp, 'DD-MON-YYYY HH24:MI:SS'));
				}
			}
		}
	}
	
	printf("\nGet Trades completed");

	EXEC SQL CLOSE GUP_C6;
	return;

Liblabel:
	SqlError("getTrades", 1);
	return;
}

void getDateTimeStamp()
{
	EXEC SQL BEGIN DECLARE SECTION;
		VARCHAR GUT_datetimestamp[20];
	EXEC SQL END DECLARE SECTION;

	EXEC SQL SELECT TO_CHAR(SYSDATE, 'MM/DD/YYYY HH24:MI:SS') INTO :GUT_datetimestamp FROM DUAL;

	GUT_datetimestamp.arr[GUT_datetimestamp.len] = 0;
	printf("%s\n", GUT_datetimestamp.arr);
	return;

Liblabel:
	SqlError("getDateTimeStamp", 1);
	return;
}